#!/usr/bin/env python2.7
from sklearn import metrics
import argparse
import json
import sys

def mk_vectors(A, B):
# make A and B into maps.
  Amap = {}
  for (elem,label) in A:
    Amap[elem] = label
  Bmap = {}
  for (elem,label) in B:
    Bmap[elem] = label

# Put the labels into the vectors with the same
# ordering. Now, the ith entry in Afvec/Bfvec corresponds
# to a particular element in A/B.
  assert Amap.keys() == Bmap.keys()
  Afvec = []
  Bfvec = []
  for i in Amap.keys():
    Afvec.append(Amap[i])
    Bfvec.append(Bmap[i])

  return (Afvec,Bfvec)

def do_fmi(A, B):
  AVec, BVec = mk_vectors(A, B)
  return metrics.fowlkes_mallows_score(AVec, BVec)

def main(args):
  clusters = []
  truth = json.load(open(args.groundtruth, 'r'))
  cmp_meth = None
  if args.method == "fmi":
    cmp_meth = do_fmi
  else:
    print "Invalid clustering algorithm"
    return 1

  for i in args.clusters:
    clusters.append(json.load(open(i, 'r')))

  for B in clusters:
    print "%s,%s,%.4f" % (truth["name"], B["name"], cmp_meth(truth["labels"],B["labels"]))

  return 0

if __name__ == '__main__':
  parser = argparse.ArgumentParser("analyze_clusters")
  parser.add_argument("groundtruth", help="Ground truth data", type=str)
  parser.add_argument("clusters", help="Clusters in JSON format", nargs='+')
  parser.add_argument("-m", "--method", help="Clustering method", type=str, default="fmi", choices=["fmi"])
  args = parser.parse_args()
  sys.exit(main(args)) 
